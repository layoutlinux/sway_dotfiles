#: Keyboard shortcuts {{{

kitty_mod ctrl+shift
clear_all_shortcuts no

action_alias launch_tab launch --type=tab --cwd=current

map f1 launch_tab nvim
#:     map f2 launch_tab emacs


#: Clipboard {{{

#: Copy to clipboard

map ctrl+c copy_or_interrupt

map kitty_mod+v paste_from_clipboard

map shift+insert paste_from_selection

map kitty_mod+y new_window less @selection

#: }}}

#: Scrolling {{{

#: Scroll line up
map kitty_mod+up    scroll_line_up
map kitty_mod+k     scroll_line_up

#: Scroll line down
map kitty_mod+down    scroll_line_down
map kitty_mod+j       scroll_line_down


#: Scroll page up
map kitty_mod+page_up scroll_page_up

#: Scroll page down
map kitty_mod+page_down scroll_page_down


#: Scroll to top
# map kitty_mod+home scroll_home
# map cmd+home       scroll_home

#: Scroll to bottom
# map kitty_mod+end scroll_end
# map cmd+end       scroll_end

#: Scroll to previous shell prompt
map kitty_mod+z scroll_to_prompt -1


#: Scroll to next shell prompt
map kitty_mod+x scroll_to_prompt 1

#: Browse scrollback buffer in pager

# map kitty_mod+h show_scrollback

#::  You can pipe the contents of the current screen and history
#::  buffer as STDIN to an arbitrary program using launch --stdin-
#::  source. For example, the following opens the scrollback buffer in
#::  less in an overlay window::

#::      map f1 launch --stdin-source=@screen_scrollback --stdin-add-formatting --type=overlay less +G -R

#::  For more details on piping screen and buffer contents to external
#::  programs, see launch <https://sw.kovidgoyal.net/kitty/launch/>.

#: Browse output of the last shell command in pager

# map kitty_mod+g show_last_command_output

#::  You can also define additional shortcuts to get the command
#::  output. For example, to get the first command output on screen::

#::      map f1 show_first_command_output_on_screen

#::  To get the command output that was last accessed by a keyboard
#::  action or mouse action::

#::      map f1 show_last_visited_command_output

#::  You can pipe the output of the last command run in the shell
#::  using the launch action. For example, the following opens the
#::  output in less in an overlay window::

#::      map f1 launch --stdin-source=@last_cmd_output --stdin-add-formatting --type=overlay less +G -R

#::  To get the output of the first command on the screen, use
#::  @first_cmd_output_on_screen. To get the output of the last jumped
#::  to command, use @last_visited_cmd_output.

#::  Requires shell integration
#::  <https://sw.kovidgoyal.net/kitty/shell-integration/> to work.

#: }}}

#: Window management {{{

#: New window
map kitty_mod+enter new_window


#::  You can open a new kitty window running an arbitrary program, for
#::  example::

#::      map kitty_mod+y launch mutt

#::  Open a new window with the current working directory
map ctrl+alt+enter launch --cwd=current

#::  You can open a new window that is allowed to control kitty via
#::  the kitty remote control facility with launch --allow-remote-
#::  control. Any programs running in that window will be allowed to
#::  control kitty. For example::

#::      map ctrl+enter launch --allow-remote-control some_program

#::  You can open a new window next to the currently active window or
#::  as the first window, with::

#::      map ctrl+n launch --location=neighbor
#::      map ctrl+f launch --location=first

#::  For more details, see launch
#::  <https://sw.kovidgoyal.net/kitty/launch/>.

#: Close window
map kitty_mod+w close_window

#: Next window
map kitty_mod+] next_window

#: Previous window
map kitty_mod+[ previous_window

#: Move window forward
map kitty_mod+f move_window_forward

#: Move window backward
map kitty_mod+b move_window_backward

#: Move window to top
map kitty_mod+` move_window_to_top

#: Start resizing window
map kitty_mod+r start_resizing_window


#: First window
map kitty_mod+1 first_window

#: Second window
map kitty_mod+2 second_window

#: Third window
map kitty_mod+3 third_window

#: Fourth window
map kitty_mod+4 fourth_window

#: Fifth window
map kitty_mod+5 fifth_window

#: Sixth window
map kitty_mod+6 sixth_window

#: Seventh window
map kitty_mod+7 seventh_window

#: Eighth window
map kitty_mod+8 eighth_window

#: Ninth window
map kitty_mod+9 ninth_window

#: Tenth window
map kitty_mod+0 tenth_window

#: Visually select and focus window
map kitty_mod+f7 focus_visible_window

#: Visually swap window with another
map kitty_mod+f8 swap_with_window


#: }}}

#: Tab management {{{

#: Next tab
map kitty_mod+right next_tab
map ctrl+tab        next_tab

#: Previous tab
map kitty_mod+left previous_tab
map ctrl+shift+tab previous_tab

#: New tab
map kitty_mod+t new_tab


#: Close tab
map kitty_mod+q close_tab


#: Close OS window
map shift+cmd+w close_os_window

#: Move tab forward
map kitty_mod+. move_tab_forward

#: Move tab backward
map kitty_mod+, move_tab_backward

#: Set tab title
map kitty_mod+alt+t set_tab_title


#: You can also create shortcuts to go to specific tabs, with 1 being
#: the first tab, 2 the second tab and -1 being the previously active
#: tab, -2 being the tab active before the previously active tab and
#: so on. Any number larger than the number of tabs goes to the last
#: tab and any number less than the number of previously used tabs in
#: the history goes to the oldest previously used tab in the history::

#:     map ctrl+alt+1 goto_tab 1
#:     map ctrl+alt+2 goto_tab 2

#: Just as with new_window above, you can also pass the name of
#: arbitrary commands to run when using new_tab and new_tab_with_cwd.
#: Finally, if you want the new tab to open next to the current tab
#: rather than at the end of the tabs list, use::

#:     map ctrl+t new_tab !neighbor [optional cmd to run]
#: }}}

#: Layout management {{{

#: Next layout

map kitty_mod+l next_layout


#: You can also create shortcuts to switch to specific layouts::

#:     map ctrl+alt+t goto_layout tall
#:     map ctrl+alt+s goto_layout stack

#: Similarly, to switch back to the previous layout::
map ctrl+alt+p last_used_layout

#: There is also a toggle_layout action that switches to the named
#: layout or back to the previous layout if in the named layout.
#: Useful to temporarily "zoom" the active window by switching to the
#: stack layout::
map ctrl+alt+z toggle_layout stack

#: }}}

#: Font sizes {{{

#: You can change the font size for all top-level kitty OS windows at
#: a time or only the current one.

#: Increase font size
map kitty_mod+kp_add change_font_size all +2.0


#: Decrease font size
map kitty_mod+kp_subtract change_font_size all -2.0


#: Reset font size
map kitty_mod+backspace change_font_size all 0



#: To setup shortcuts for specific font sizes::

#:     map kitty_mod+f6 change_font_size all 10.0

#: To setup shortcuts to change only the current OS window's font
#: size::

#:     map kitty_mod+f6 change_font_size current 10.0
#: }}}

#: Select and act on visible text {{{

#: Open URL
map kitty_mod+e open_url_with_hints


#: Insert selected path

# map kitty_mod+p>f kitten hints --type path --program -

#::  Select a path/filename and insert it into the terminal. Useful,
#::  for instance to run git commands on a filename output from a
#::  previous git command.

#: Open selected path

# map kitty_mod+p>shift+f kitten hints --type path

#::  Select a path/filename and open it with the default open program.

#: Insert selected line

# map kitty_mod+p>l kitten hints --type line --program -

#::  Select a line of text and insert it into the terminal. Useful for
#::  the output of things like: `ls -1`.

#: Insert selected word

# map kitty_mod+p>w kitten hints --type word --program -

#::  Select words and insert into terminal.

#: Insert selected hash

# map kitty_mod+p>h kitten hints --type hash --program -

#::  Select something that looks like a hash and insert it into the
#::  terminal. Useful with git, which uses SHA1 hashes to identify
#::  commits.

#: Open the selected file at the selected line

# map kitty_mod+p>n kitten hints --type linenum

#::  Select something that looks like filename:linenum and open it in
#::  your default editor at the specified line number.

#: Open the selected hyperlink

# map kitty_mod+p>y kitten hints --type hyperlink

#::  Select a hyperlink (i.e. a URL that has been marked as such by
#::  the terminal program, for example, by `ls --hyperlink=auto`).


#: The hints kitten has many more modes of operation that you can map
#: to different shortcuts. For a full description see hints kitten
#: <https://sw.kovidgoyal.net/kitty/kittens/hints/>.
#: }}}

#: Miscellaneous {{{

#: Show documentation
map kitty_mod+f1 show_kitty_doc overview

#: Toggle fullscreen
map kitty_mod+f11 toggle_fullscreen


#: Toggle maximized
map kitty_mod+f10 toggle_maximized

#: Unicode input
map kitty_mod+u    kitten unicode_input

#: Edit config file
map kitty_mod+f2 edit_config_file


#: Open the kitty command shell
map kitty_mod+escape kitty_shell window


#: Increase background opacity
map kitty_mod+a>m set_background_opacity +0.1

#: Decrease background opacity
map kitty_mod+a>l set_background_opacity -0.1

#: Make background fully opaque
map kitty_mod+a>1 set_background_opacity 1

#: Reset background opacity
map kitty_mod+a>d set_background_opacity default

#: Reset the terminal
map kitty_mod+delete clear_terminal reset active


#::  You can create shortcuts to clear/reset the terminal. For
#::  example::

#::      # Reset the terminal
#::      map f1 clear_terminal reset active
#::      # Clear the terminal screen by erasing all contents
#::      map f1 clear_terminal clear active
#::      # Clear the terminal scrollback by erasing it
#::      map f1 clear_terminal scrollback active
#::      # Scroll the contents of the screen into the scrollback
#::      map f1 clear_terminal scroll active
#::      # Clear everything on screen up to the line with the cursor or the start of the current prompt (needs shell integration)
#::      map f1 clear_terminal to_cursor active
#::      # Same as above except cleared lines are moved into scrollback
#::      map f1 clear_terminal to_cursor_scroll active

#::  If you want to operate on all kitty windows instead of just the
#::  current one, use all instead of active.

#: Reload kitty.conf
map kitty_mod+f5 load_config_file

#: Debug kitty configuration
map kitty_mod+f6 debug_config

#::  Show details about exactly what configuration kitty is running
#::  with and its host environment. Useful for debugging issues.

#: Send arbitrary text on key presses

#::  E.g. map ctrl+shift+alt+h send_text all Hello World

#::  You can tell kitty to send arbitrary (UTF-8) encoded text to the
#::  client program when pressing specified shortcut keys. For
#::  example::

#::      map ctrl+alt+a send_text all Special text

#::  This will send "Special text" when you press the Ctrl+Alt+A key
#::  combination. The text to be sent decodes ANSI C escapes
#::  <https://www.gnu.org/software/bash/manual/html_node/ANSI_002dC-
#::  Quoting.html> so you can use escapes like \e to send control
#::  codes or \u21fb to send Unicode characters (or you can just input
#::  the Unicode characters directly as UTF-8 text). You can use
#::  `kitten show-key` to get the key escape codes you want to
#::  emulate.

#::  The first argument to send_text is the keyboard modes in which to
#::  activate the shortcut. The possible values are normal,
#::  application, kitty or a comma separated combination of them. The
#::  modes normal and application refer to the DECCKM cursor key mode
#::  for terminals, and kitty refers to the kitty extended keyboard
#::  protocol. The special value all means all of them.

#::  Some more examples::

#::      # Output a word and move the cursor to the start of the line (like typing and pressing Home)
#::      map ctrl+alt+a send_text normal Word\e[H
#::      map ctrl+alt+a send_text application Word\eOH
#::      # Run a command at a shell prompt (like typing the command and pressing Enter)
#::      map ctrl+alt+a send_text normal,application some command with arguments\r


#: }}}

#: }}}
